<% @update_area = get_unique_area_id %>

<%= render_page_caption("#{t(:storage_tablespace_usage_header_caption, :default=>'Storage-objects for database')} #{get_current_database[:sid]} #{localeDateTime(Time.now, :minutes)}")%>

<div class="flex-row-container">

<%
def total_data_style(rec)
  "font-weight:bold;" if rec.contents == "TOTAL"
end

column_options =
[
  {:caption=>"Typ",         :data=>proc{|rec| rec.contents},                    :title=>t(:storage_tablespace_usage_total_type_hint, :default=>'Type of allocation'), data_title: proc{|rec| "%t: #{rec.content_hint}"},  :data_style=>proc{|rec| total_data_style(rec)} },
  {:caption=>"MB Total",    :data=>proc{|rec| formattedNumber(rec.mbtotal)},    :title=>t(:storage_tablespace_usage_total_size_total_hint, :default=>'Total size in MBytes'),        :align=>:right,   :data_style=>proc{|rec| total_data_style(rec)} },
  {:caption=>"MB Used",     :data=>proc{|rec| formattedNumber(rec.mbused)},     :title=>t(:storage_tablespace_usage_total_size_used_hint, :default=>'Used size in MBytes'),    :align=>:right,   :data_style=>proc{|rec| total_data_style(rec)} },
  {:caption=>"MB Free",     :data=>proc{|rec| formattedNumber(rec.mbfree)},     :title=>t(:storage_tablespace_usage_total_size_free_hint, :default=>'Free size in MBytes'),       :align=>:right,   :data_style=>proc{|rec| total_data_style(rec)} },
  {:caption=>"% used",      :data=>proc{|rec| formattedNumber((rec.mbused.to_f * 100/rec.mbtotal rescue nil),1)},  :title=>t(:storage_tablespace_usage_total_pct_hint, :default=>'Percent used'),                   :align=>:right,   :data_style=>proc{|rec| total_data_style(rec)} },
]

%>
<div class="flex-row-element">
  <%= gen_slickgrid(@totals, column_options, {:caption=>t(:storage_tablespace_usage_total_caption, :default=>'Sums total'), :width=>:auto, :max_height=>450, :no_wrap=>true}) %>
</div>

<%
column_options =
[
  {:caption=>"Segment-Type",   :data=>proc{|rec| rec.segment_type},                   :title=>t(:storage_tablespace_usage_segment_type_hint, :default=>'Segment type of sum')},
  {:caption=>"MBytes",       :data=>proc{|rec| formattedNumber(rec.mbytes)},          :title=>t(:storage_tablespace_usage_segment_mbytes_hint, :default=>'Size of segment type (used space net) in MBytes'),        :align=>:right, show_pct_hint: true},
]

%>

<div class="flex-row-element">
  <%= gen_slickgrid(@segments, column_options, {:caption =>t(:storage_tablespace_usage_segment_caption, :default=>'Net sums in TS by segment types'), :width=>:auto, :max_height=>450, :no_wrap=>true}) %>
</div>


<% if @fra_usage.length > 0 %>

<%
   column_options =
           [
                   {:caption=>"File type",  :data=>proc{|rec| rec.file_type},                    :title=>'File type within fast recovery area'},
                   {:caption=>"MBytes",     :data=>proc{|rec| fn(rec.percent_space_used*@fra_size_bytes/(1024*1024)/100,2)},     :title=>'Used space in FRA in MB',        :align=>:right, show_pct_hint: true},
                   {:caption=>"% used",     :data=>proc{|rec| fn(rec.percent_space_used,2)},     :title=>'Percentage used from total',        :align=>:right},
           ]

%>

<div class="flex-row-element">
  <%= gen_slickgrid(@fra_usage, column_options, {:caption=> "Usage of fast recovery area (FRA), total FRA size = #{fn(@fra_size_bytes/(1024*1024*1024),2) } GB", :width=>:auto, :max_height=>450, :no_wrap=>true}) %>
</div>

<% end %>

<%
  def link_mb(rec)
    ajax_link(fn(rec.total_mbytes),
                 {:controller   => :dba_schema,
                          :action       => :list_objects,
                          :schema       => {:name => rec.schema},
                          :update_area  => @update_area,
                  },
                 :title=>t(:storage_tablespace_usage_schemas_link_hint, :default=>'Show objects of schema')
     )
  end

column_options =
[
  {:caption=>"Schema",  :data=>proc{|rec| rec.schema},                  :title=>"Schema / Owner"},
]

  type_data_title = proc do |type|
    res = nil
    res = "Tables including table partitions, LOB segments, cluster and nested tables" if type == 'Table'
    res = "Indexes including index partitions and LOB indizes"                if type == 'Index'
    res
  end

@schema_segment_types.each do |type, dummy|
  column_options <<  {:caption=>type,  :data=>proc{|rec| formattedNumber(rec[type])}, :title=>"#{t(:storage_tablespace_usage_schemas_mb_hint, :default=>'Used space in MBytes for segment type')}\n#{type_data_title.call(type)}", data_title: proc {|rec| "%t\n= #{fn(rec[type], 3)} MB"}, :align=>:right, show_pct_hint: true}
end
column_options <<  {:caption=>'Total MB',  :data=>proc{|rec| link_mb(rec)}, :title=>t(:storage_tablespace_usage_schemas_mb_hint, :default=>'Used space in MBytes for segment type'), data_title: proc {|rec| "%t\n= #{fn(rec.total_mbytes, 3)} MB"}, :align=>:right, show_pct_hint: true}


%>

<div class="flex-row-element">
  <%= gen_slickgrid(@schemas, column_options, {:caption=> "Schema-Usage ( if > 1 MB)", :width=>:auto, :max_height=>450, :no_wrap=>true}) %>
</div>

  <%
    link_mb_used = proc do |rec|
      ajax_link(fn(rec.mbytes),
                         {:controller   => :dba_schema,
                          :action       => :list_objects,
                          :tablespace   => {:name => rec.tablespace_name},
                          :schema       => {:name => rec.owner},
                          :update_area  => @update_area,
                         },
                 :title=>'Show object details of this schema in tablespace'
     )
    end

    show_quota = proc do |rec|
      if rec.bytes_quota == -1
        'UNLIMITED'
      else
        fn(rec.bytes_quota / (1024*1024)) if !rec.bytes_quota.nil?
      end
    end

    show_charged = proc do |rec|
      fn(rec.bytes_charged / (1024*1024)) if !rec.bytes_charged.nil?
    end

    column_options =
        [
            {:caption => "Schema",        :data => proc {|rec| rec.owner},                  :title => 'Name of schema'},
            {:caption => "Tablespace",    :data => proc {|rec| rec.tablespace_name},        :title => t(:storage_tablespace_usage_tablespace_name_hint, :default => 'Name of tablespace')},
            {:caption => "Used (MB)",     :data => link_mb_used,                            :title => "Used space in tablespace by this schema in MB from DBA_SEGMENTS", :align => :right, show_pct_hint: true},
            {:caption => "Quota (MB)",    :data => show_quota,                              :title => "Maximum quota in tablespace for this schema in MB", :align => :right},
            {:caption => "Charged (MB)",  :data => show_charged,                            :title => "MB charged for quota in tablespace for this schema from DBA_TS_QUOTAS", :align => :right},
        ]
  %>
  <div class="flex-row-element">
    <%= gen_slickgrid(@tablespace_per_schema, column_options, {:caption => "Tablespace-usage per schema", :width => :auto, :max_height => 450, :no_wrap => true}) %>
  </div>
</div>

  <%

    link_mb_used = proc do |rec|
      if rec.contents == 'PERMANENT'
        ajax_link(fn(rec.mbused),
                           {:controller   => :dba_schema,
                            :action       => :list_objects,
                            :tablespace   => {:name => rec.tablespace_name},
                            :update_area  => @update_area,
                           },
                   :title=>t(:storage_tablespace_usage_tablespaces_link_hint, :default=>'Show objects of this tablespace with their sizes')
       )
      else
        fn rec.mbused
      end
    end

    link_mb_free = proc do |rec|
      if rec.contents == 'PERMANENT'
        ajax_link(fn(rec.mbfree),
                           {:controller   => :storage,
                            :action       => :list_free_extents,
                            :tablespace   => rec.tablespace_name,
                            :update_area  => @update_area,
                           },
                   :title=>t(:storage_tablespace_usage_tablespaces_mbfree_hint, :default=>"Show free extents of tablespace and their size distribution. Allows you to evaluate fragmentation of free extents of this tablespace.")
       )
      else
        fn rec.mbfree
      end
    end

    link_ts_details = proc do |rec|
      case rec.tablespace_name
        when 'SYSAUX' then
          ajax_link('v$SYSAUX_Occupants',
                           {:controller   => :storage,
                            :action       => :list_sysaux_occupants,
                            :update_area  => @update_area,
                           },
                   :title=>"Show detailed usage of SYSAUX storage from v$SYSAUX_Occupants"
                   )
      end
    end

    show_pct_used = proc do |rec|
      if !rec.pctused.nil? && rec.contents == 'PERMANENT' && rec.pctused > 90 && rec.autoextensible == 'NO'
        "<div style=\"background-color: orange;\">#{fn(rec.pctused, 1)}</div>".html_safe
      else
        fn(rec.pctused, 1)
      end
    end

    show_max_size = proc do |rec|
      unless rec.autoextensible == 'YES'
        nil
      else
        fn(rec.max_size_mb)
      end
    end

    data_title_max_size = proc do |rec|
      unless rec.autoextensible == 'YES'
        "%t"
      else
        "%t\n\nFree space incl. possible autoextend = #{fn(rec.max_size_mb - rec.mbused) rescue nil} MB"
      end
    end

    show_pct_used_max = proc do |rec|
      if rec.max_size_mb.nil? || rec.autoextensible == 'NO'
        nil
      else
        calc_mb = rec.max_size_mb
        calc_mb = rec.mbtotal if rec.mbtotal > rec.max_size_mb                  # There are cases where max_size is smaller than current size for autoextent datafiles? Don't know how this works?

        max_pct_used = rec.mbused * 100.0 / calc_mb

        if !max_pct_used.nil? && rec.contents == 'PERMANENT' && max_pct_used > 90
          "<div style=\"background-color: orange;\">#{fn(max_pct_used, 1)}</div>".html_safe
        else
          fn(max_pct_used, 1)
        end
      end
    end

    link_file_count = proc do |rec|
      if rec.contents['Redo-Logs']
        ajax_link(fn(rec.file_count),
                           {:controller   => :dba,
                            :action       => :show_redologs,
                            instance:     rec.inst_id,
                            :update_area  => @update_area,
                           },
                   :title=>'Show redo log details')
      else
        ajax_link(fn(rec.file_count),
                           {:controller       => :storage,
                            :action           => :datafile_usage,
                            :tablespace_name  => rec.tablespace_name,
                            :update_area      => @update_area,
                           },
                   :title=>'Show datafile details')
      end
    end

    column_options =
        [
            {:caption=>"Tablespace",          :data=>proc{|rec| rec.tablespace_name},             :title=>t(:storage_tablespace_usage_tablespace_name_hint, :default=>'Name of tablespace')},
        ]
    column_options << {:caption=>"Con-ID",  :data=>proc{|rec| rec.con_id},           :title=>"Container-ID", align: :right} if is_cdb?

    column_options.concat [
            {:caption=>"Contents",            :data=>proc{|rec| rec.contents},                    :title=>t(:storage_tablespace_usage_tablespace_content_hint, :default=>'Type/content of tablespace'), data_title: proc{|rec| "%t: #{rec.content_hint}"} },
            {:caption=>"Block size",          :data=>proc{|rec| formattedNumber(rec.blocksize)},  :title=>t(:storage_tablespace_usage_tablespace_blocksize_hint, :default=>'Blocksize of tablespace in Bytes'),        :align=>:right},
            {:caption=>"MB Total",            :data=>proc{|rec| formattedNumber(rec.mbtotal)},    :title=>"Total current size of tablespace in MB\n(without possible autoextend-expansion)",           :align=>:right, show_pct_hint: true},
            {:caption=>"MB Used",             :data=>link_mb_used,                                :title=>"Used space in tablespace in MB",           :align=>:right, show_pct_hint: true},
            {:caption=>"MB Free",             :data=>link_mb_free,                                :title=>"Free space in tablespace in MB\n(without possible autoextend-expansion)",           :align=>:right, show_pct_hint: true},
            {:caption=>"% used",              :data=>show_pct_used,                               :title=>"Usage in percent\n(without possible autoextend-expansion)",                         :align=>:right},
            {:caption=>"Auto ext.",           :data=>proc{|rec| rec.autoextensible},              :title=>"Auto-Extensible ?"},
            {:caption=>"MB max.",             :data=>show_max_size,                               :title=>"Maximum size of tablespace in MB including autoextend.\nFilled only if autoextend is used for at least one datafile.", align: :right, data_title: data_title_max_size, data_style: proc{|rec| "background-color: orange;" if rec.max_size_mb && rec.max_size_mb < rec.mbtotal}},
            {:caption=>"% used max.",         :data=>show_pct_used_max,                           :title=>"Usage in percent of maximum size of tablespace including autoextend.\nFilled only if autoextend is used for at least one datafile.", data_title: data_title_max_size, align: :right},
            {:caption=>"Files",               :data=>link_file_count,                             :title=>"Number of data files, temp files or redo log groups", align: :right},
            {:caption=>"Status",              :data=>proc{|rec| rec.status}},
            {:caption=>"Content",             :data=>proc{|rec| rec.contents}},
            {:caption=>"Logging",             :data=>proc{|rec| rec.logging}},
            {:caption=>"Force log.",          :data=>proc{|rec| rec.force_logging}},
            {:caption=>"Extent mgmt.",        :data=>proc{|rec| rec.extent_management},           :title=>'Extent management'},
            {:caption=>"Allocation Type",     :data=>proc{|rec| rec.allocation_type}},
            {:caption=>"Pl. in",              :data=>proc{|rec| rec.plugged_in},                  :title=>'Indicates whether the tablespace is plugged in '},
            {:caption=>"Segment Space Mgmt.", :data=>proc{|rec| rec.segment_space_management},    :title=>'Indicates whether the free and used segment space in the tablespace is managed using free lists (MANUAL) or bitmaps (AUTO)'}
        ]
    column_options << {:caption=>"Def. table compression", :data=>proc{|rec| rec.def_tab_compression},      :title=>'Indicates whether default table compression is enabled (ENABLED) or not (DISABLED)', :data_title=>proc{|rec| get_db_version >= '11.2' ? "%t\nCompress For = #{rec.compress_for}" : "%t"}}
    column_options << {:caption=>'Big file',            :data=>proc{|rec| rec.bigfile},                     :title=>'Indicates whether the tablespace is a bigfile tablespace (YES) or a smallfile tablespace (NO)'}
    column_options << {:caption=>'Encrypt.',            :data=>proc{|rec| rec.encrypted},                   :title=>"Indicates whether the tablespace is encrypted"} if get_db_version >= '11.2'
    column_options << {:caption=>'Def. in memory',      :data=>proc{|rec| rec.def_inmemory},                :title=>"Indicates whether the In-Memory Column Store (IM column store) is by default enabled (ENABLED) or disabled (DISABLED) for tables in this tablespace"} if get_db_version >= '12.1.0.2' && PanoramaConnection.edition == :enterprise
    column_options << {:caption=>'Details',             :data=>link_ts_details,                             :title=>"Tablespace-specific details"}



  %>

  <%= gen_slickgrid(@tablespaces, column_options, {:caption => "Tablespace-usage total from #{dba_or_cdb('DBA_Tablespaces')}", :max_height=>450, :no_wrap=>true}) %>

<div id="<%= @update_area %>"></div>

