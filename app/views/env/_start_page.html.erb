<%= render_page_caption("#{t :env_current_database, :default=>"Current database"} '#{@database_info.name}' #{t(:created, :default=>'created')} #{localeDateTime(@database_info.created)}") %>

<% column_options =
       [
           {:caption=>"Server versions",      :data=>proc{|rec| rec.banner },         :title=>"Version info for database server", data_title: proc{|rec| "%t\n#{rec[:banner_title]}"} },
           {:caption=>"Client versions",      :data=>proc{|rec| rec.client_info },    :title=>"Version info for client machine (machine where Panorama's server instance is running)", data_title: proc{|rec| "%t\n#{rec[:client_info_title]}"}},
       ]
%>
<%= gen_slickgrid(@version_info, column_options, {:width => :auto}) %>



<% column_options =
       [
           {:caption=>'DBID',          :data=>proc{|rec| rec.dbid },                           :title=>"Unique identifier for this database"},
           {:caption=>"Instance",      :data=>proc{|rec| "#{rec.instance_number}#{" (*)" if rec.instance_connected && @instance_data.length >1}" },       :title=>"Instance number, (*) for connecting instance"},
           {:caption=>"Name",          :data=>proc{|rec| rec.instance_name },                  :title=>"Instance name"},
           {:caption=>"Hostname",      :data=>proc{|rec| rec.host_name },                      :title=>"Last startup time of instance"},
           {:caption=>"Startup",       :data=>proc{|rec| localeDateTime(rec.startup_time) },   :title=>"Startup der DB", :data_title=>proc{|rec| "%t, open mode = #{rec.open_mode}"}},
           {:caption=>"Archiver",      :data=>proc{|rec| rec.archiver },                       :title=>"Archiver mode of instance"},
           {:caption=>"Character-set", :data=>proc{|rec| rec.nls_characterset },               :title=>"Character set of database", :data_title=>proc{|rec| "%t: NChar_Character_Set=#{rec.nls_nchar_characterset}"}},
           {:caption=>'Database role', :data=>proc{|rec| rec.database_role },                  :title=>"Database role for data guard\nCan be one of the following:\n- SNAPSHOT STANDBY\n- LOGICAL STANDBY\n- PHYSICAL STANDBY\n- PRIMARY\n- FAR SYNC"},
           {:caption=>"Instance role", :data=>proc{|rec| rec["instance_role"] },               :title=>"Instance role for data guard"},
           {:caption=>"CPU-Count",     :data=>proc{|rec| rec.cpu_count },                      :title=>"Number of CPUs counted for instance"},
           {:caption=>"Resource manager plan", :data=>proc{|rec| rec.resource_manager_plan },  :title=>"Resource manager plan that is currently active.\nEmpty if resource manager is deactivated."},
           {:caption=>"Protection mode", :data=>proc{|rec| rec.protection_mode },              :title=>"Protection mode currently in effect for the database.\nLook at DB-parameter \"log_archive_dest_n\" to recognize what sync-mode is used for standby configuration (SYNC or NOSYNC, AFFIRM or NOAFFIRM).",  :data_title=>proc{|rec| "%t\nProtection level = #{rec.protection_level}"}},
           {:caption=>"Switchover status", :data=>proc{|rec| rec.switchover_status },          :title=>"Indicates whether switchover is allowed", :data_title=>proc{|rec| "%t\n#{explain_switchover_status(rec.switchover_status)}"}  },
           {:caption=>"DG broker",     :data=>proc{|rec| rec.dataguard_broker },               :title=>"Indicates whether the Data Guard configuration is being managed by the broker (ENABLED) or not (DISABLED)"},
           {:caption=>"Force logging", :data=>proc{|rec| rec.force_logging },                  :title=>"Indicates whether the database is under force logging mode (YES) or not (NO)"},
           {:caption=>"AWR interval",  :data=>proc{|rec| rec.snap_interval_minutes },          :title=>"Interval in minutes for AWR-snapshots\nValues are hidden if you did not acknowledge licensing of Diagnostic Pack yet", :align=>:right},
           {:caption=>"AWR retention", :data=>proc{|rec| rec.snap_retention_days },            :title=>"Retention in days for AWR-snapshots\nValues are hidden if you did not acknowledge licensing of Diagnostic Pack yet", :align=>:right},
       ]
   column_options << {:caption=>'CDB',           :data=>proc{|rec| rec.cdb },            :title=>'Is this database a container DB (PDB)?', :align=>:right}  if get_db_version >= '12.1'


%>
<div>
<%= gen_slickgrid(@instance_data, column_options, {
    :caption => "Instance data", :width => :auto, show_pin_icon: 2
})
%>
</div>

<% @update_area_dbids = get_unique_area_id %>
<script type="text/javascript">
    ajax_html('<%= @update_area_dbids %>', 'env', 'list_dbids', {update_area: "<%= @update_area_dbids %>"}, {retain_status_message: true});
</script>
<div id="<%= @update_area_dbids %>"></div>


<% if get_current_database[:cdb] %>
    <% column_options =
           [
               {:caption=>'Inst.',            :data=>proc{|rec| rec.inst_id},                         :title=>"Instance number"},
               {:caption=>'Con-ID',           :data=>proc{|rec| "#{rec.con_id}#{" (*)" if rec.con_id == rec.connected_con_id}" },   :title=>"The ID of the container to which the data pertains. Possible values include:\n0: This value is used for rows containing data that pertain to the entire CDB. This value is also used for rows in non-CDBs.\n1: This value is used for rows containing data that pertain to only the root\nn: Where n is the applicable container ID for the rows containing data\n(*) for the container-ID you are connected on"},
               {:caption=>'DBID',             :data=>proc{|rec| rec.dbid },                           :title=>"PDB identifier calculated when the PDB is created and stored in all file headers associated with the PDB"},
               {:caption=>'Con-UID',          :data=>proc{|rec| fn rec.con_uid },                     :title=>"Unique identifier associated with the PDB"},
               {:caption=>'Name',             :data=>proc{|rec| rec.name },                           :title=>"Name of the PDB"},
               {:caption=>'Open mode',        :data=>proc{|rec| rec.open_mode},                       :title=>"Open mode info"},
               {:caption=>'Restricted',       :data=>proc{|rec| rec.restricted},                      :title=>"Indicates whether only users possessing RESTRICTED SESSION privilege can connect to the PDB"},
               {:caption=>'Open time',        :data=>proc{|rec| localeDateTime(rec.open_time)},       :title=>"Date and time when the database was last opened"},
               {:caption=>'Total size',       :data=>proc{|rec| fn(rec.total_size/(1024*1024))},      :title=>"If a PDB is opened, disk space (in MBytes) used by the container,\nincluding both data and temp files.\nIf a PDB is closed, will be set to 0."},
               {:caption=>'Block size',       :data=>proc{|rec| fn(rec.block_size)},                  :title=>"The current block size for the PDB"},
               {:caption=>'Recovery status',  :data=>proc{|rec| rec.recovery_status},                 :title=>"Shows whether recovery is enabled or disabled for the PDB."},
               {:caption=>'Snapshot parent',  :data=>proc{|rec| rec.snapshot_parent_con_id },         :title=>"This column shows the container ID of the master PDB that this PDB is a snapshot clone of.\nThis column shows a non-zero value only if the PDB is a snapshot clone.\nFor all other cases, it shows a value of 0."},
           ]
       column_options << {:caption=>'Application root',         :data=>proc{|rec| rec.application_root},                :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Application PDB',          :data=>proc{|rec| rec.application_pdb},                 :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Application seed',         :data=>proc{|rec| rec.application_seed},                :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Application root con-ID',  :data=>proc{|rec| rec.application_root_con_id},         :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Application root clone',   :data=>proc{|rec| rec.application_root_clone},          :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Proxy PDB',                :data=>proc{|rec| rec.proxy_pdb},                       :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Local UNDO',               :data=>proc{|rec| rec.local_undo},                      :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Creation time',            :data=>proc{|rec| localeDateTime(rec.creation_time)},   :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'PDB count',                :data=>proc{|rec| fn rec.pdb_count},                    :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Audit files size',         :data=>proc{|rec| fn rec.audit_files_size},             :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Max. size',                :data=>proc{|rec| fn rec.max_size},                     :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Max. diag. size',          :data=>proc{|rec| fn rec.max_diagnostics_size},         :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'
       column_options << {:caption=>'Max. audit size',          :data=>proc{|rec| fn rec.max_audit_size},               :title=>"Docu. for 12.2 not yet available"} if get_db_version >= '12.2'




    %>
  <div>
    <%= gen_slickgrid(@containers, column_options, {
        :caption => "Pluggable database info from gv$Containers", :max_height=>200, :width => :auto, show_pin_icon: 2
    })
    %>
  </div>
<% end %>

<% if @traces.length > 0 %>
  <%
    column_options =
        [
            {caption: 'Trace type',                       data: proc{|rec| rec.trace_type},       title: 'Type of the trace'},
            {caption: 'Primary ID',                       data: proc{|rec| rec.primary_id},       title: 'Primary qualifier (specific client identifier or service name)'},
            {caption: 'Qualifier ID1',                    data: proc{|rec| rec.qualifier_id1},    title: 'Secondary qualifier (specific module name)'},
            {caption: 'Qualifier ID2',                    data: proc{|rec| rec.qualifier_id2},    title: 'Additional qualifier (specific action name)'},
            {caption: 'Waits',                            data: proc{|rec| rec.waits},            title: 'Indicates whether waits are traced (TRUE) or not (FALSE)'},
            {caption: 'Binds',                            data: proc{|rec| rec.binds},            title: 'Indicates whether binds are traced (TRUE) or not (FALSE)'},
            {caption: 'Instance name',                    data: proc{|rec| rec.instance_name},    title: 'Instance name for tracing restricted to named instances'},
        ]
  %>
  <%=
    gen_slickgrid(@traces, column_options, {
        :caption    => "Active SQL traces from DBA_Enabled_Traces",
        :width      => :auto,
        :max_height => 200
    })
  %>
<% end %>


<h2><%= t :env_licensing_header, :default=>"Licensing" %></h2>
<% @show_management_pack_choice = true %>
<%= render :partial => 'licensing' %>

<% if @panorama_sampler_data.count > 0 %>
  <%
    link_select = proc do |rec|
      ajax_link(rec.owner, {
                :controller   => :env,
                :action       => :set_panorama_sampler_schema,
                :schema       => rec.owner,
                :update_area  => :content_for_layout
                },
        {:title => "Select this schema for access on Panorama-Sampler workload data"}
      )
    end

    selected = proc do |rec|
      'x ' if rec.owner ==  get_current_database[:panorama_sampler_schema]
    end

    awr_ash_data_title = proc do |rec|
      "%t\nDBID of last recorded snapshot in this schema = #{rec[:dbid]}\nNumber of RAC-instances for the last recorded DBID = #{rec[:instances]}"
    end

    column_options =
        [
            {:caption=> 'S',                                :data=>selected,                                                        :title=> 'The selected schema is used for Panorama-Sampler workload data'},
            {:caption=> 'Schema',                           :data=>link_select,                                                     :title=> 'Schema of your database containing Panorama-Sampler workload data'},
            {:caption=> 'First AWR/ASH snapshot',           :data=>proc{|rec| localeDateTime(rec[:min_time])},                      :title=> 'Start of first snapshot recorded in this Panorama-Sampler schema for this DBID',      data_title: awr_ash_data_title},
            {:caption=> 'Last AWR/ASH snapshot',            :data=>proc{|rec| localeDateTime(rec[:max_time])},                      :title=> 'End of last snapshot recorded in this Panorama-Sampler schema for this DBID',         data_title: awr_ash_data_title},
            {:caption=> 'AWR/ASH snapshot interval',        :data=>proc{|rec| fn(rec[:snap_interval])},                             :title=> "Snapshot interval in minutes of Panorama-Sampler",                   :align=>:right,  data_title: awr_ash_data_title},
            {:caption=> 'AWR/ASH snapshot retention',       :data=>proc{|rec| fn(rec[:snap_retention])},                            :title=> "Snapshot retention time for snapshots of Panorama-Sampler in days",  :align=>:right,  data_title: awr_ash_data_title},
            {:caption=> 'First object size snapshot',       :data=>proc{|rec| localeDateTime(rec[:object_sizes_min_gather_date])},  :title=> 'First gather date of object size info' },
            {:caption=> 'Last object size snapshot',        :data=>proc{|rec| localeDateTime(rec[:object_sizes_max_gather_date])},  :title=> 'Last gather date of object size info' },
            {:caption=> 'First DB-cache objects snapshot',  :data=>proc{|rec| localeDateTime(rec[:cache_objects_min_snapshot])},    :title=> 'First snapshot date of DB-cache objects info' },
            {:caption=> 'Last DB-cache objects snapshot',   :data=>proc{|rec| localeDateTime(rec[:cache_objects_max_snapshot])},    :title=> 'Last snapshot date of DB-cache objects info' },
            {:caption=> 'First blocking locks snapshot',    :data=>proc{|rec| localeDateTime(rec[:blocking_locks_min_snapshot])},   :title=> 'First snapshot date of blocking locks info' },
            {:caption=> 'Last blocking locks snapshot',     :data=>proc{|rec| localeDateTime(rec[:blocking_locks_max_snapshot])},   :title=> 'Last snapshot date of blocking locks info' },
        ]

  %>

  <%=
    if @panorama_sampler_data.count > 1
      caption = '<span style="color: red">Multiple schemas of this DB contains Panorama-Sampler workload data! Please select your preferred schema</span>'.html_safe
    else
      caption = 'Panorama-Sampler workload data found on this database  '
    end

    gen_slickgrid(@panorama_sampler_data, column_options, {
        :caption    => caption,
        :width      => :auto,
        :max_height => 200
    })
  %>
<% end %>

<% if @dictionary_access_problem %>
    <h2><%= "Dictionary Access-Problem"   %></h2>
    <div style='color:red;'>
      <%= @dictionary_access_msg.html_safe %>
    </div>
<% end %>

<h2><%= t :env_handling_hints, :default=>"Handling hints" %></h2>

<h3><%= t :generally, :default=>"Generally" %></h3>
<ul>
  <li><%= t :env_handling_hint_generally_1, :default=>"Context-info ist provided system-wide by mouse-over hints" %></li>
  <li><%= t :env_handling_hint_generally_2, :default=>"Details for shown values are often available by clicking on hyperlinks" %></li>
  <li><%= t :env_handling_hint_generally_3, :default=>"Details are shown inline in table cells or continued at bottom of current page" %></li>
</ul>

<h3><%= t :tables, :default=>"Tables" %></h3>
<ul>
  <li><%= t :env_handling_hint_1, :default=>"Sort table content by clicking column-header" %></li>
  <li><%= t :env_handling_hint_2, :default=>"Sort by multiple columns may be done by subsequent sorting of single columns" %></li>
  <li><%= t :env_handling_hint_3, :default=>"Search filter, optional diagram view and export to Excel are available via context menu (right mouse button)" %></li>
</ul>
