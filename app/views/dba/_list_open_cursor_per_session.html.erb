<%

   @update_area = get_unique_area_id

   def link_column_workarea(rec, value)
       ajax_link(value, {
                :controller        => "dba_sga",
                :action            => "list_cursor_memory",
                :update_area       => @update_area,
                :instance          => @instance,
                :sql_id            => rec.sql_id
              },
        :title => "Show details of PGA-Workarea"
        )
   end

   def link_saddr_session(rec)
     output = rec.own_saddr
     if rec.own_saddr == 'NO'
       output << ": "
       output << ajax_link("NO: SID=#{rec.saddr_sid}, Serial#=#{rec.saddr_serialno}", {
                               :action => :show_session_detail,
                               :instance => @instance,
                               :sid      => rec.saddr_sid,
                               :serialno => rec.saddr_serialno,
                               :update_area => @update_area
                              },
                       :title => "Show details for session referenced by gv$Open_Cursor.SAddr"
        )
     end
     output.html_safe
   end

  column_options =
  [
    {:caption=>"SQL-ID",        :data=>proc{|rec| link_sql_id(@update_area, @instance, rec.sql_id)},                                     :title=>"SQL-ID of statement"},
    {:caption=>"Est.Opt.Size",  :data=>proc{|rec| link_column_workarea(rec, formattedNumber(rec.estimated_optimal_size))}, :align=>"right", :title=>"Estimated size required by this work area to execute the operation completely in memory (optimal execution). Derived from either optimizer statistics or previous executions in bytes."},
    {:caption=>"Est.Onep.Size", :data=>proc{|rec| link_column_workarea(rec, formattedNumber(rec.estimated_onepass_size))}, :align=>"right", :title=>"Estimated size required by this work area to execute the operation in a single pass. Derived from either optimizer statistics or previous executions in bytes."},
    {:caption=>"Last Mem.Used", :data=>proc{|rec| link_column_workarea(rec, formattedNumber(rec.last_memory_used))},       :align=>"right", :title=>"Memory used by this work area during the last execution of the cursor in bytes"},
    {:caption=>"Active Time",   :data=>proc{|rec| link_column_workarea(rec, formattedNumber(rec.active_time))}, :align=>"right",            :title=>"Average time this work area is active (in hundredths of a second)"},
    {:caption=>"Max. Temp",     :data=>proc{|rec| link_column_workarea(rec, formattedNumber(rec.max_tempseg_size))}, :align=>"right",       :title=>"Maximum temporary segment size (in bytes) created by an instantiation of this work area. This column is null if this work area has never spilled to disk."},
    {:caption=>"Last Temp",     :data=>proc{|rec| link_column_workarea(rec, formattedNumber(rec.last_tempseg_size))}, :align=>"right",      :title=>"Temporary segment size (in bytes) created in the last instantiation of this work area. This column is null if the last instantiation of this work area did not spill to disk."},
    {:caption=>"SQL-Text",      :data=>proc{|rec| my_html_escape(rec.sql_text)},                                                                            :title=>"First characters of SQL-text"},
    {:caption=>"Own SAddr",     :data=>proc{|rec| link_saddr_session(rec)},                                                                 :title=>"Does gv$Open_Cursor.SAddr reference same session like gv$Open_Cursor.SID? If not, session referenced by SAddr is shown"},
  ]
  column_options << {caption: 'Last active',    data: proc{|rec| localeDateTime(rec.last_sql_active_time)},     title: "Time when this cursor was last executed"} if get_db_version >= '11.1'
  column_options << {caption: 'SQL exec ID',    data: proc{|rec| fn(rec.sql_exec_id)}, align: :right,           title: "If the open cursor is executing, then the SQL execution identifier for that execution"} if get_db_version >= '11.1'
  column_options << {caption: 'Cursor_Type',    data: proc{|rec| rec.cursor_type},                              title: "Type of cursor:\nOPEN PL/SQL - Open PL/SQL cursors\nOPEN - Other open cursors\nSESSION CURSOR CACHED - Cursors cached in the generic session cursor cache\nOPEN RECURSIVE - Open recursive cursors\nDICTIONARY LOOKUP CURSOR CACHED - Cursors cached in the dictionary lookup cursor cache\nBUNDLE DICTIONARY LOOKUP CACHED - Cursors cached in the bundled dictionary lookup cursor cache\nJAVA NAME TRANSLATION CURSOR CACHED - Cursors cached in the Java name translation cursor cache\nREPLICATION TRIGGER CURSOR CACHED - Cursors cached in the replication trigger cursor cache\nCONSTRAINTS CURSOR CACHED - Cursors cached in the constraints cursor cache\nPL/SQL CURSOR CACHED - Cursors cached in the PL/SQL cursor cache"} if get_db_version >= '12.1'

%>
<%= gen_slickgrid(@opencursors, column_options, {
        :caption    => "Open cursors for instance=#{@instance}, SID=#{@sid}",
        :max_height => 450,
        :width      => :auto,
        show_pin_icon: 1
}) %>

<div style="clear: both;"></div>




  <div id="<%= @update_area %>">

  </div>
