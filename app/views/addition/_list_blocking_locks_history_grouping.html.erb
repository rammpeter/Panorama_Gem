<%
# Eindeutige DIV-ID bei mehrfacher rekursiver Nutzung des Screeens
@update_area = get_unique_area_id

def link_column_sql_id(instance, sql_id, child_number)
  link_historic_sql_id(instance, sql_id, @groupfilter[:Min_Timestamp], @groupfilter[:Max_Timestamp], @update_area, nil)
end


def link_column(result, value, newgroupkey, action, linktitle)
  ajax_link(value,
              {:action       => action,
               :groupfilter  => @groupfilter.merge({@groupkey => result.group_value}),
               :update_area  => @update_area
              }.merge(newgroupkey),
       :title=>linktitle)
end

def link_column_single(result, value)
  link_column(result, value, {}, "list_blocking_locks_history_single_record", "Show single snapshot records of grouping")
end

# Prüfung, ob value ein Anzahlfeld a'la "< 4 >" ist
def is_value_anzahl?(value)
  value[0,1] == '<' && value[value.length-1,1] =='>'
end

def link_column_grouping(result, value, name)
  # Nur als Link anzeigen, wenn mehrere Treffer vorhanden (Muster "< Anzahl >")
  if is_value_anzahl?(value)
    if value == "< 0 >"
      ""
    else
      link_column(result, value,
                {:groupkey => name},
                :list_blocking_locks_history_grouping,
                "Show samples of this group row grouped by #{name}"
               )
    end
  else         # Wert trotzdem als Link darstellen, wenn andere Details statt Gruppierung gezeigt werden können
    case name
    when "SID"
      link_column_blocking_reason_cascade(result, value)
    when "SQL-ID" then
      if is_value_anzahl?(result.instance_number) || is_value_anzahl?(result.sql_child_number)
        value
      else
        link_column_sql_id(result.instance_number, result.sql_id, result.sql_child_number)
      end
    when "B.SQL-ID" then
      if is_value_anzahl?(result.blocking_instance_number) || is_value_anzahl?(result.blocking_sql_child_number)
        value
      else
        link_column_sql_id(result.blocking_instance_number, result.blocking_sql_id, result.blocking_sql_child_number )
      end
    when "B.SID"
      if is_value_anzahl?(result.blocking_instance_number) || is_value_anzahl?(result.blocking_sid) || is_value_anzahl?(result.blocking_serialno)
        value
      else
        link_column_blocked(result, result.blocking_sid)
      end
    when 'Blocking Object'
      link_object_description(@update_area, result.blocking_object.split('.')[0], result.blocking_object.split('.')[1])
    else value
    end
  end
end

def link_column_caption(rec, caption, value)
  case caption
    when "SQL-ID" then
      if is_value_anzahl?(rec.instance_number) || is_value_anzahl?(rec.sql_child_number)
        value
      else
        link_column_sql_id(rec.instance_number, rec.sql_id, rec.sql_child_number )
      end
    when "B.SQL-ID" then
      if is_value_anzahl?(rec.blocking_instance_number) || is_value_anzahl?(rec.blocking_sql_child_number)
        value
      else
        link_column_sql_id(rec.blocking_instance_number, rec.blocking_sql_id, rec.blocking_sql_child_number )
      end
    when "B.SID"
      if is_value_anzahl?(rec.blocking_instance_number) || is_value_anzahl?(rec.blocking_sid) || is_value_anzahl?(rec.blocking_serialno)
        value
      else
        link_column_blocked(rec, rec.blocking_sid)
      end
    else value
  end
end

def link_column_blocking_reason_cascade(rec, value)
    ajax_link(value,
                {:action                => "list_blocking_reason_cascade",
                 :update_area           => @update_area,
                 :snapshot_timestamp    => localeDateTime(rec.max_snapshot_timestamp),
                 :instance              => rec.instance_number,
                 :sid                   => rec.sid,
                 :serialno              => rec.serialno
                },
         :title => "Show full cascade of blockers for this session")
end

def link_column_blocked(rec, value)
  ajax_link(value, {
            :action             => 'list_blocking_locks_history_hierarchy_detail',
            :update_area        => @update_area,
            :snapshot_timestamp => localeDateTime(rec.max_snapshot_timestamp),
            :blocking_instance  => rec.blocking_instance_number,
            :blocking_sid       => rec.blocking_sid,
            :blocking_serialno  => rec.blocking_serialno
          },
   :title=>'Show sessions blocked by this session')
end


column_options =
  [
    {:caption=>"Min. Timestamp",  :data=>proc{|rec| localeDateTime(rec.min_snapshot_timestamp)},            :title=>"Smallest snapshot timestamp in considered period"},
    {:caption=>"Max. Timestamp",  :data=>proc{|rec| localeDateTime(rec.max_snapshot_timestamp)},            :title=>"Largest snapshot timestamp in considered period"},
    {:caption=>"B. Inst.",        :data=>proc{|rec| link_column_grouping(rec, rec.blocking_instance_number, 'B.Instance')}, :title=>"Instance of blocking session (or number if multiple)"},
    {:caption=>"B. SID",          :data=>proc{|rec| link_column_grouping(rec, rec.blocking_sid, 'B.SID')}, :title=>"SID of blocking session (or number if multiple)"},
    {:caption=>"B. SQL-ID",       :data=>proc{|rec| link_column_grouping(rec, rec.blocking_sql_id, 'B.SQL-ID')}, :title=>"SQL-ID of blocking session (or number if multiple)"},
    {:caption=>"B. Event",        :data=>proc{|rec| link_column_grouping(rec, rec.blocking_event, 'B.Event')}, :title=>"Wait event of blocking session (or number if multiple)"},
    {:caption=>"B. Status",       :data=>proc{|rec| link_column_grouping(rec, rec.blocking_status, 'B.Status')}, :title=>"Status of blocking session (or number if multiple)"},
    {:caption=>"Wait (Sec.)",     :data=>proc{|rec| formattedNumber(rec.seconds_in_wait)},                  :title=>"Number of seconds sessions are waiting", :align=>"right", data_title: proc{|rec| "%t\n#{seconds_explain(rec.seconds_in_wait)}"}},
    {:caption=>"Samples",         :data=>proc{|rec| link_column_single(rec, "< #{formattedNumber(rec.samples,0)} >")}, :title=>"Number of recorded snapshot samples", :align=>"right"},
    {:caption=>"Blocking object", :data=>proc{|rec| link_column_grouping(rec, rec.blocking_object, 'Blocking Object')}, :title=>"Schema and name of blocking object (or number if multiple)"},
    {:caption=>"RowID",           :data=>proc{|rec| link_column_grouping(rec, rec.blocking_rowid, 'RowID')}, :title=>"RowID of blocking object (or number if multiple)"},
    {:caption=>"W. Inst.",        :data=>proc{|rec| link_column_grouping(rec, rec.instance_number, 'Instance')}, :title=>"Instance of blocked session (or number if multiple)"},
    {:caption=>"W. SID",          :data=>proc{|rec| link_column_grouping(rec, rec.sid, 'SID')},             :title=>"SID of blocked session (or number if multiple)"},
    {:caption=>"W. SQL-ID",       :data=>proc{|rec| link_column_grouping(rec, rec.sql_id, 'SQL-ID')},       :title=>"SQL-ID of blocked session (or number if multiple)"},
    {:caption=>"W. Event",        :data=>proc{|rec| link_column_grouping(rec, rec.event, 'Event')},         :title=>"Wait event of blocked session (or number if multiple)", data_title: proc{|rec| "%t\n\n#{explain_wait_event(rec.event)}"}},
    {:caption=>"W. Module",       :data=>proc{|rec| link_column_grouping(rec, rec.module, 'Module')},       :title=>"Module of blocked session (or number if multiple)"},
    {:caption=>"LT",              :data=>proc{|rec| link_column_grouping(rec, rec.lock_type, 'Locktype')},  :title=>"Lock type of blocked session (or number if multiple)", :data_title=>'#{lock_types(rec.lock_type)}'},
    {:caption=>"R",               :data=>proc{|rec| link_column_grouping(rec, rec.request, 'Request')},     :title=>"Requested lock mode of blocked session (or number if multiple)", :data_title=>'#{lock_modes(rec.request)}'},
    {:caption=>"L",               :data=>proc{|rec| link_column_grouping(rec, rec.lock_mode, 'LockMode')},  :title=>"Held lock mode of blocked session (or number if multiple)", :data_title=>'#{lock_modes(rec.lock_mode)}'},
    {:caption=>"W. Object name",  :data=>proc{|rec| link_column_grouping(rec, rec.object_name, 'Objectname')}, :title=>"Objectname of blocked session (or number if multiple)"},
  ]
%>

<%=
    caption = "Blocking Locks: Grouped by #{@groupkey}, Filter: "
    @groupfilter.each {|key,value|
            caption << " #{key} = '#{value}' "
    }

 gen_slickgrid(@locks, column_options, {
        :caption => caption,
        :max_height => 450,
        show_pin_icon: 1,
        update_area:   @update_area
 }) %>

