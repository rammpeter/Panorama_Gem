# GitHub action recipe
# preconditions:
#   - Install Java
#     > wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.rpm
#     > rpm -Uvh jdk-17_linux-x64_bin.rpm && rm jdk-17_linux-x64_bin.rpm
#   - Install Google Chrome:
#     > wget "https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"
#     > yum install liberation-fonts libXScrnSaver.x86_64 libappindicator-gtk3.x86_64 vulkan libgbm xdg-utils alsa-lib nspr nss
#     > rpm -i google-chrome-stable_current_x86_64.rpm
#   - Install jRuby
#     > curl -sSL https://get.rvm.io | bash
#     > source $HOME/.rvm/scripts/rvm
#     > rvm install ${JRUBY_VERSION}
#     > rvm --default use ${JRUBY_VERSION}
#     > gem install bundler


name: Panorama_Gem CI

on: [push]

jobs:
  test:
    runs-on: self-hosted

    strategy:
      max-parallel: 4
      matrix:
        management_pack_license: [diagnostics_and_tuning_pack, diagnostics_pack, panorama_sampler, none]
        db_version: [autonomous, 12.2.0.1-ee]
        include:
          - management_pack_license: diagnostics_and_tuning_pack
            port_major: 10
          - management_pack_license: diagnostics_pack
            port_major: 20
          - management_pack_license: panorama_sampler
            port_major: 30
          - management_pack_license: panorama_sampler
            port_major: 40
          - db_version: autonomous
            port_minor: 1
          - db_version: 12.2.0.1-ee
            port_minor: 2
    env:
      MANAGEMENT_PACK_LICENSE: ${{ matrix.management_pack_license }}
      DB_VERSION: ${{ matrix.db_version }}
      TEST_PORT: ${{ 1521 + matrix.port_major + matrix.port_minor }}

    services:
      oracle:
        image: harbor.osp-dd.de/panorama/oracle/database_prebuilt_panorama_test:${{  matrix.db_version }}
        ports:
          - ${{ matrix.TEST_PORT }}:1521
    steps:
    - uses: actions/checkout@v1

    - name: Set environment for subsequent steps
      run: |
        if [[ "$DB_VERSION" == "autonomous" ]]; then
          if [[ "$MANAGEMENT_PACK_LICENSE" == "diagnostics_and_tuning_pack" ]]; then
            echo "TEST_USERNAME=panorama_test1" >> $GITHUB_ENV
          elif [[ "$MANAGEMENT_PACK_LICENSE" == "diagnostics_pack" ]]; then
            echo "TEST_USERNAME=panorama_test2" >> $GITHUB_ENV
          elif [[ "$MANAGEMENT_PACK_LICENSE" == "panorama_sampler" ]]; then
            echo "TEST_USERNAME=panorama_test3" >> $GITHUB_ENV
          elif [[ "$MANAGEMENT_PACK_LICENSE" == "none" ]]; then
            echo "TEST_USERNAME=panorama_test4" >> $GITHUB_ENV
          fi
          echo "TEST_PASSWORD=Panorama_test9" >> $GITHUB_ENV
          echo "TEST_TNS=PANORAMATEST_TPURGENT" >> $GITHUB_ENV
          echo "TNS_ADMIN=$PWD/.github" >> $GITHUB_ENV
        else
          echo "TEST_USERNAME=panorama_test" >> $GITHUB_ENV
          echo "TEST_PASSWORD=panorama_test" >> $GITHUB_ENV
        fi

    - name: Check OS prerequisites
      run: |
        env
        docker ps -a
        docker images
        java -version

    - name: bundle install
      run: |
        source $HOME/.rvm/scripts/rvm
        bundle --version
        pwd
        bundle config set deployment 'true'
        bundle install

    # create encypted wallet zip file to store in repository, add passphrase
    # gpg --symmetric --cipher-algo AES256 Wallet_panoramatest.zip
    - name: Decrypt Wallet for database access
      if: ${{ env.DB_VERSION == 'autonomous' }}
      env:
        GPG_KEY_FOR_DB_WALLET_ENCRYPTION: ${{ secrets.GPG_KEY_FOR_DB_WALLET_ENCRYPTION }}
      run: |
        cd .github && ./decrypt_DB_wallet.sh && unzip Wallet_panoramatest.zip

    - name: Ensure playwright installed
      run: |
        npm install @playwright/test  
        npx playwright install

    - name: run Test
      run: |
        source $HOME/.rvm/scripts/rvm
        echo "TNS_ADMIN=$TNS_ADMIN"
        if [[ -n "$TNS_ADMIN" ]]; then
          echo "tnsnames.ora="
          cat $TNS_ADMIN/tnsnames.ora
        fi
        bundle exec rake test

    - name: Archive test log
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: test.log
        path: test/dummy/log/test.log

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: tmp
        path: test/dummy/tmp
