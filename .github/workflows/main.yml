# GitHub action recipe
# preconditions:
#   - Install Java
#     > wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.rpm
#     > rpm -Uvh jdk-17_linux-x64_bin.rpm && rm jdk-17_linux-x64_bin.rpm
#   - Install Chromium for the dependencies needed by playwright:
#   - Install jRuby
#     > curl -sSL https://get.rvm.io | bash
#     > source "$HOME/.rvm/scripts/rvm"
#     > rvm install ${JRUBY_VERSION}
#     > rvm --default use ${JRUBY_VERSION}
#     > gem install bundler


name: Panorama_Gem CI

on:
  push:
  schedule:
    # * is a special character in YAML so you have to quote this string, runs on Sunday morning
    - cron: '0 0 * * 0'

jobs:
  test:
    runs-on: self-hosted

    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        management_pack_license:
        - diagnostics_and_tuning_pack
        - diagnostics_pack
        - panorama_sampler
        - none
        db_version:
        - autonomous
        - 11.2.0.4-ee
        - 12.1.0.2-ee
        - 12.2.0.1-ee
        - 18.3.0.0-ee
        - 18.4.0.0-xe
        - 19.3.0.0-ee
        - 19.10.0.0-ee
        - 19.10.0.0-se2
        # TODO: PDB and CDB
    env:
      MANAGEMENT_PACK_LICENSE: ${{ matrix.management_pack_license }}
      DB_VERSION: ${{ matrix.db_version }}
      TEST_SERVICENAME: ${{ matrix.db_version }}

    steps:
    - uses: actions/checkout@v1

    - name: Set environment for subsequent steps
      run: |
        if [[ "$DB_VERSION" == "autonomous" ]]; then
          if [[ "$MANAGEMENT_PACK_LICENSE" == "diagnostics_and_tuning_pack" ]]; then
            echo "TEST_USERNAME=panorama_test1" >> $GITHUB_ENV
          elif [[ "$MANAGEMENT_PACK_LICENSE" == "diagnostics_pack" ]]; then
            echo "TEST_USERNAME=panorama_test2" >> $GITHUB_ENV
          elif [[ "$MANAGEMENT_PACK_LICENSE" == "panorama_sampler" ]]; then
            echo "TEST_USERNAME=panorama_test3" >> $GITHUB_ENV
          elif [[ "$MANAGEMENT_PACK_LICENSE" == "none" ]]; then
            echo "TEST_USERNAME=panorama_test4" >> $GITHUB_ENV
          fi
          echo "TEST_PASSWORD=Panorama_test9" >> $GITHUB_ENV
          echo "TEST_TNS=PANORAMATEST_TPURGENT" >> $GITHUB_ENV
          echo "TNS_ADMIN=$PWD/.github" >> $GITHUB_ENV
        else
          echo "TEST_USERNAME=panorama_test" >> $GITHUB_ENV
          echo "TEST_PASSWORD=panorama_test" >> $GITHUB_ENV
          # set TEST_SERVICENAME if not default ORCLPDB1
          if [[ "$DB_VERSION" == "11.2.0.4-ee" ]]; then
            echo "TEST_SERVICENAME=ORCL" >> $GITHUB_ENV
          elif [[ "$DB_VERSION" == "18.4.0.0-xe" ]]; then
            echo "TEST_SERVICENAME=XEPDB1" >> $GITHUB_ENV
          fi
        fi
        # Ensure that each run uses it's own config without previous artifacts
        panorama_var_home=/tmp/panorama_var_home_${MANAGEMENT_PACK_LICENSE}_${DB_VERSION}
        rm -rf $panorama_var_home
        mkdir $panorama_var_home
        echo "PANORAMA_VAR_HOME=$panorama_var_home" >> $GITHUB_ENV
        # get a free random port for the database
        TEST_PORT=`comm -23 <(seq 1530 2000 | sort) <(ss -Htan | awk '{print $4}' | cut -d':' -f2 | sort -u) | shuf | head -n 1`
        echo "TEST_PORT=$TEST_PORT" | tee -a $GITHUB_ENV
        echo "DB_CONTAINER_NAME=DB$TEST_PORT" | tee -a $GITHUB_ENV
        JRUBY_VERSION=`cat .ruby-version | cut -c 7-13`
        echo "JRUBY_VERSION=$JRUBY_VERSION" | tee -a $GITHUB_ENV

    - name: Check OS prerequisites
      run: |
        env
        docker ps -a
        docker images
        java -version

    - name: Set jRuby version in rvm
      run: |
        source "$HOME/.rvm/scripts/rvm"
        rvm use --default jruby-${{ env.JRUBY_VERSION }}       

    - name: bundle install
      run: |
        source "$HOME/.rvm/scripts/rvm"
        bundle --version
        pwd
        bundle config set deployment 'true'
        bundle install

    # create encypted wallet zip file to store in repository, add passphrase
    # gpg --symmetric --cipher-algo AES256 Wallet_panoramatest.zip
    - name: Decrypt Wallet for database access
      if: ${{ env.DB_VERSION == 'autonomous' }}
      env:
        GPG_KEY_FOR_DB_WALLET_ENCRYPTION: ${{ secrets.GPG_KEY_FOR_DB_WALLET_ENCRYPTION }}
      run: |
        cd .github && ./decrypt_DB_wallet.sh && unzip Wallet_panoramatest.zip

    - name: Ensure playwright installed
      run: |
        # uninstall needed only to ensure next version is completely installed
        # npm uninstall playwright 
        npm install playwright  
        npx playwright install

    - name: Start database
      if: ${{ env.DB_VERSION != 'autonomous' }}
      run: |
        docker run -d --name ${{ env.DB_CONTAINER_NAME }} -p ${{ env.TEST_PORT }}:1521 harbor.osp-dd.de/panorama/oracle/database_prebuilt_panorama_test:${{ matrix.db_version }}

    - name: Wait for DB available
      if: ${{ env.DB_VERSION != 'autonomous' }}
      run: |
        source "$HOME/.rvm/scripts/rvm"
        export TEST_PORT=${{ env.TEST_PORT }}
        echo $GITHUB_WORKSPACE/lib/tasks/wait_for_db_available.rake
        ls -l $GITHUB_WORKSPACE/lib/tasks/wait_for_db_available.rake
        bundle exec rake -f $GITHUB_WORKSPACE/lib/tasks/wait_for_db_available.rake ci_preparation:wait_for_db_available[10]

    - name: run Test
      run: |
        source "$HOME/.rvm/scripts/rvm"
        export TEST_PORT=${{ env.TEST_PORT }}
        echo "TNS_ADMIN=$TNS_ADMIN"
        if [[ -n "$TNS_ADMIN" ]]; then
          echo "tnsnames.ora="
          cat $TNS_ADMIN/tnsnames.ora
        fi
        bundle exec rake test

    - name: stop database
      if: always()
      run: |
        if [[ "${{ env.DB_VERSION }}" != 'autonomous'  ]]; then
          docker logs ${{ env.DB_CONTAINER_NAME }}
          docker rm -f ${{ env.DB_CONTAINER_NAME }}
        fi

    - name: Archive test log
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.MANAGEMENT_PACK_LICENSE }}_${{ env.DB_VERSION }}_test.log
        path: test/dummy/log/test.log

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.MANAGEMENT_PACK_LICENSE }}_${{ env.DB_VERSION }}_tmp
        path: test/dummy/tmp
